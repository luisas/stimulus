/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Nextflow config file for running minimal tests
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Defines input files and everything required to run a fast and simple pipeline test.

    Use as follows:
        nextflow run main.nf -profile test_ibis,<docker/singularity> --outdir <OUTDIR>

----------------------------------------------------------------------------------------
*/

params {
    config_profile_name        = 'Test ibis profile - with preprocessing'
    config_profile_description = 'Minimal ibis test dataset (with preprocessing) to check pipeline functions'

    // Input data
    data                 = params.pipelines_testdata_base_path + 'deepmodeloptim/testdata/ibis_znf/ghts.peaks'
    data_config          = params.pipelines_testdata_base_path + 'deepmodeloptim/testdata/ibis_znf/data.yaml'
    model                = params.pipelines_testdata_base_path + 'deepmodeloptim/testdata/ibis_znf/ConvBasic_withEfficientKAN.py'
    model_config         = params.pipelines_testdata_base_path + 'deepmodeloptim/testdata/ibis_znf/ConvBasic_withEfficientKAN.yaml'
    preprocessing_config = params.pipelines_testdata_base_path + 'deepmodeloptim/testdata/ibis_znf/preprocessing.yaml'
    genome               = 'GRCh38'
    bed_peak_size        = 40

    // output
    save_data    = true
}

// Limit resources so that this can run on GitHub Actions
process {
    maxRetries = params.max_retries
    errorStrategy = params.err_start

    withLabel:process_low {
        cpus   = { 1                    }
        memory = { 4.GB * task.attempt  }
        time   = { 10.m  * task.attempt }
    }
    withLabel:process_medium {
        cpus   = { 2                    }
        memory = { 6.GB * task.attempt  }
        time   = { 30.m  * task.attempt }
    }
    withLabel:process_high {
        cpus   = { 4                    }
        memory = { 8.GB * task.attempt  }
        time   = { 1.h  * task.attempt  }
    }
}
