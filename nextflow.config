params {

    // Output options
    outdir              = "./results/"          // the outdir has to be the one the user specify _ the unique name of the run _
                                                //  the time so that multiple runs will not overlap
    publish_dir_mode    = "copy"

    // Inputs
    csv                 = null                   // the input file containing all input data
    model               = null                   // the model file in python, the model that will be tested by this pipeline
    exp_conf            = null                   // the json config file that specifies all the parameters relative to the data manipulation
    train_conf          = null                   // the config file with all the hyperparameter directives (choiches) and all ray tune specs

    // Optional flags
    shuffle             = true                   // flag to tell wether to shuffle or not the data and run a train on it. Sanity check always run on default. (If the way we think at shuffle change maybe is better to remove this flag and make it into a parameter of the user given json for noise nad split)

    // Computational resources
    max_retries         = 0
    err_start           = 'finish'
    max_cpus            = 6                     // this flasg and the following are for regulating resources, profiles can overwrite these.
    max_memory          = 8.GB
    max_time            = 24.h
    
    // General
    help                = false

}

// Load modules.config for DSL2 module specific options
includeConfig 'configs/modules.config'

profiles {
    debug {
        dumpHashes             = true
        process.beforeScript   = 'echo $HOSTNAME'
        process.debug          = true
        cleanup                = false
        nextflow.enable.configProcessNamesValidation = true
    }
    crg          { includeConfig "configs/crg.config"       }
    test         { includeConfig "configs/test.config"      }
    test_stub    { includeConfig "configs/test_stub.config" }
    local        { includeConfig "configs/local.config"     }
    fpkm         { includeConfig "configs/fpkm.config"      }

}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
